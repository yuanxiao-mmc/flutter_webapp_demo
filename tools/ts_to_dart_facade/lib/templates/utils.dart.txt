// ignore_for_file: avoid_web_libraries_in_flutter

import 'package:js/js.dart';
import 'package:js/js_util.dart' as js_util;

@JS('Object.keys')
external List<String> objectKeys(object);

/// 判断是否是基础类型
bool _isBasicType(value) {
  if (value == null || value is num || value is bool || value is String) {
    return true;
  }
  return false;
}

/// 讲 JS 对象转换为 Dart 对象
T? dartify<T>(dynamic jsObject) {
  if (jsObject == null) return null;
  if (_isBasicType(jsObject)) {
    return jsObject as T;
  }

  if (jsObject is List) {
    return jsObject.map(dartify).toList() as T;
  }

  var keys = objectKeys(jsObject);
  var result = <String, dynamic>{};
  for (var key in keys) {
    result[key] = dartify(js_util.getProperty(jsObject, key));
  }

  return result as T;
}

/// Promise 
@JS()
abstract class Promise<T> {
  external factory Promise(
      void Function(void Function(T result) resolve, Function reject) executor);
  external Promise then(void Function(T result) onFulfilled,
      [Function onRejected]);
}
